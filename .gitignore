# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Database files
*.db
*.sqlite
*.sqlite3
banking_system.db
test.db
test_*.db

# Log files
*.log
logs/
*.log.*

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Test results and temporary files (now organized in test_results/)
# Keep test_results/ directory but ignore individual CSV files
test_results_*.csv
test_results_*.json
test_results_*.xlsx
temp_*.py

# Cache directories
.cache/
__pycache__/
.pytest_cache/

# Streamlit cache
.streamlit/

# UV (Python package manager) files
.uv/
uv.lock

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Excel temporary files
~$*.xlsx
~$*.xls

# Application specific
# Keep TestCases (1).xlsx as it's part of the project requirements
# test_results_questions_and_sql.md - keeping this as it's a deliverable

# Temporary debug and test files (now organized in tests/manual/)
# Individual files that might be created during development
debug_*.py
temp_test_*.py
scratch_*.py

# LLM model files (if downloaded locally)
models/
*.bin
*.safetensors
*.gguf

# Backup files
*.bak
*.backup
*.old

# Local configuration files that might contain sensitive data
config.local.py
secrets.py
.secrets

# Node.js (in case you add any frontend tooling)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Profiling data
*.prof

# Local development databases
local_*.db
dev_*.db
